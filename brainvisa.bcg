

#-----------------------------------------------------------------------------
class BrainvisaComponent( GenericMakerComponent ):
  _name = 'brainvisa'

  def _libraries( self ):
    return []
    
  def weakDependencies( self ):
    return [ DotComponent ]


  def dependencies( self ):
    return [ SqliteComponent, PythonComponent, QtUIComponent, 'soma-base' ]


  def beforeVersionChange( self, newver, perforce ):
    versionfile = os.path.join( self.sourceDir(), 'neuroVersion.py' )
    perforce.p4edit( versionfile )
    file = open( versionfile, 'w' )
    print >> file, '''# Warning : do not modify this file.
#           It is automatically generated by build-config
 
_versionNumber = ''' + self.get( 'version' ) + '''
_versionString = str( _versionNumber )
'''
    file.close()
    perforce.p4submit( self._name + ', stable version',
                       perforce.p4opened( os.path.join( self.sourceDir(),
                                                        '...' ) ) )

  # Operations needed to change component version
  def changeVersion( self ):
    perforce = Perforce( self, self.getOption( 'perforce' ), 0 )
    perforce.changeVersion()

  def writeVersionFile( self, version, perforce ):
    versionfile = os.path.join( self.sourceDir(), 'neuroVersion.py' )
    perforce.p4edit( versionfile )
    file = open( versionfile, 'w' )
    print >> file, '''# Warning : do not modify this file.
#           It is automatically generated by build-config
 
_versionNumber = ''' + version + '''
_versionString = str( _versionNumber ) + 'a'
'''
    file.close()

  def filesToPack( self ):
    if self.getOption( 'i2bm', False ):
      exclude = None
      doNotExclude = None
    else:
      doNotExclude = None
      exclude = FileNameFilter(
        '*[mM]ador*.py',
        'brainvisa/toolboxes/tms/*',
        )
    for f in GenericMakerComponent.filesToPack( self ):
      if exclude is None or not exclude.match( f ) or \
         ( doNotExclude is not None and doNotExclude.match( f ) ):
        yield f


  def packageDocs( self ):
    doc = os.path.join( self.buildDir(), self.docDir() )
    if doc and os.path.exists( doc ):
      docs = []
      packs = self.getOption( 'pack', [] )
      symlinks = self.getOption( 'symlinks' )
      dstdoc = os.path.join( packageDir(), self.docDir() )
      if 'userdoc' in packs:
        docs = [ 'bv_man', 'en/help', 'fr/help', 'en/processes', 'fr/processes', 'ontology-brainvisa-3.1.0' ]
        if 'private' in packs:
          docs += [ 'bv_training', 'bv_tms', 'bv_eegmeg' ]
      if 'progdoc' in packs:
        docs += [ 'bv_pg', 'epydoc' ]
      if 'userdoc' in packs or 'progdoc' in packs:
        docs.append( 'images' )
      for d in docs:
        if os.path.isdir( os.path.join( doc, d ) ):
          copyDirectory( os.path.join( doc, d ), os.path.join( dstdoc, d ),
                         symlinks=symlinks )

  def docbookProject( self ):
    return 'brainvisa'

  def doEpydoc( self ):
    return True

  def pythonModule( self ):
    return 'brainvisa'

  def makeDocumentation( self ):
    GenericMakerComponent.makeDocumentation( self )
    bd = self.buildDir()
    print 'Generating BrainVisa processes documentation...'
    sys.stdout.flush()
    os.system( os.path.join( bd, 'bin', 'brainvisa' ) \
               + ' -b --updateDocumentation' )
    print 'BrainVisa processes doc done.'

  def configure_copyStep( self, instances ):
    GenericMakerComponent.configure_copyStep( self, instances )
    sourceDir = self.sourceDir()
    destDir = os.path.join( self.buildDir(), 'brainvisa' )

    for f in ( 'TODO', 'VERSION' ):
      source = os.path.join( sourceDir, f )
      dest = os.path.join( destDir, f )
      self.createCopiedFilesList( source, dest )
      copyFile( source, 
                dest,
                copyAsSymlinks=self.getOption( 'symlinks', False ),
                symlinks=True )

  def build( self, instances ):
    if not self._found or self._data[ 'enabled' ] == '0':
      return
    GenericMakerComponent.build( self, instances )
    destDir = os.path.join( self.buildDir(), 'brainvisa' )
    # cleanup build tree from dead links and spurious .pyc
    dirs = [ destDir ]
    dirs2 = []
    while len( dirs ) > 0:
      d = dirs.pop()
      for f in os.listdir( d ):
        fl = os.path.join( d, f )
        if os.path.isdir( fl ):
          dirs.append( fl )
          dirs2.append( fl )
        elif os.path.islink( fl ):
          if not os.path.exists( fl ):
            # dead link: remove it
            os.unlink( fl )
        elif fl.endswith( '.pyc' ) or fl.endswith( '.pyo' ):
          # remove .pyc/.pyo files since corresponding .py may
          # have moved/disapeared
          os.unlink( fl )
    while len( dirs2 ) > 0:
      d = dirs2.pop()
      if len( os.listdir( d ) ) == 0:
        # remove empty directories
        os.rmdir( d )

